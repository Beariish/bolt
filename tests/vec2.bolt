import * from core

type Vec2 = {
    x: number,
    y: number
}

fn Vec2.new(x: number, y: number) {
    return Vec2 => { x: x, y: y }
}

method Vec2.@add(other: Vec2) {
    return Vec2 => { x: this.x + other.x, y: this.y + other.y }
}

method Vec2.@sub(other: Vec2) {
    return Vec2 => { x: this.x - other.x, y: this.y - other.y }
}

method Vec2.@mul(other: Vec2) {
    return Vec2 => { x: this.x * other.x, y: this.y * other.y }
}

method Vec2.@div(other: Vec2) {
    return Vec2 => { x: this.x / other.x, y: this.y / other.y }
}

method Vec2.distance(other: Vec2) {
    let sx = this.x + other.x
    let sy = this.y + other.y
    return sqrt(sx * sx + sy * sy)
}

for outer in 15 {
    let start_time = time()
    
    for i in 100000 {
        let a = Vec2.new(5, 5)
        let b = Vec2.new(10, 10)   
        let c = a + b
    }

    let end_time = time()
    
    let duration_ms = end_time - start_time
    print("100k vec2 iterations took", duration_ms / 1000, "ms")
}


for outer in 15 {
    let start_time = time()
    
    let a = Vec2.new(5, 5)
    let b = Vec2.new(10, 10)   
    for i in 1000000 {
        let c = a.distance(b)
    }

    let end_time = time()
    
    let duration_ms = end_time - start_time
    print("1m vec2 methods took", duration_ms / 1000, "ms")
}
