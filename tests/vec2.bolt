import * from core

type Vec2 = {
    x: number,
    y: number
}

fn Vec2.new(x: number, y: number) {
    return Vec2 => { x: x, y: y }
}

method Vec2.@add(other: Vec2) {
    return Vec2 => { x: this.x + other.x, y: this.y + other.y }
}

method Vec2.@sub(other: Vec2) {
    return Vec2 => { x: this.x - other.x, y: this.y - other.y }
}

method Vec2.@mul(other: Vec2) {
    return Vec2 => { x: this.x * other.x, y: this.y * other.y }
}

method Vec2.@div(other: Vec2) {
    return Vec2 => { x: this.x / other.x, y: this.y / other.y }
}

method Vec2.sum(other: Vec2) {
    let total = this + other
    return total.x + total.y
}

method Vec2.print {
    print(this.sum(this))
}

fn Vec2.double(this: Vec2) {
    this.x *= 2
    this.y *= 2
}

let a = Vec2.new(5, 5)
let b = Vec2.new(10, 10)

let z = a + b * a / b - a
z.print()

print(a.sum(b))

let struct: BoltAccessableStruct = get_struct()
print(struct.x)
struct.x = 1000
print(struct.x)
print(struct.x, struct.y, struct.width, struct.height, struct.offset, struct.count)

for outer in 15 {
    let start_time = time()
    
    for i in 100000 {
        let a = Vec2.new(5, 5)
        let b = Vec2.new(10, 10)   
        let c = a + b
    }

    let end_time = time()
    
    let duration_ms = end_time - start_time
    print("100k vec2 iterations took", duration_ms / 1000, "ms")
}

export Vec2