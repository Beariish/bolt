import * from core


type FacType = fn(any, number): number

fn fac_internal(self: any, n: number) {
    if n < 1 { return 1 }

    let ref = self into FacType!
    return n * ref(ref, n - 1)
}

fn fac(n: number) {
    return fac_internal(fac_internal, n)
}

type FibType = fn(any, number): number

fn fib_internal(self: any, n: number) {
    if n <= 1 { return n }

    let ref = self into FibType!
    return ref(ref, n - 1) + ref(ref, n - 2)
}

fn fib(n: number) {
    return fib_internal(fib_internal, n)
}

for iter in 100 {
    let start_time = time()
    
    let result = fib(31)
    
    let end_time = time()
    
    let duration_ms = end_time - start_time
    print("fib(31) took", duration_ms / 1000, "ms", "|", result)
}