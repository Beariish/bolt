import * from core

fn return_maybe(x: number): number? {
    if x < 5 { return x }
    return null
}

let a = return_maybe(1)
let b = return_maybe(6)

print(a, b)

fn mega_union(op: bool, op2: bool): number | string | null {
    if op {
        if op2 { return 10 }

        return "hello!"
    }

    return null
}

let c = mega_union(false, false)
let d = mega_union(true, false)
let e = mega_union(true, true)

if let c2 = c {
    print("c2 is non-null!", c2)
}

if let d2 = d {
    print("d2 is non-null!", d2)
}

if let e2 = e {
    print("e2 is non-null!", e2)
}

type Vec3 = final { x: number, y: number, z: number }

method Vec3.cross(other: Vec3) {
    return Vec3 => {
        x: this.y * other.z - this.z * other.y,
        y: this.z * other.x - this.x * other.z,
        z: this.x * other.y - this.y * other.x
    }
}

method Vec3.cross2(other: Vec3) {
    let result: Vec3

    result.x = this.y * other.z - this.z * other.y
    result.y = this.z * other.x - this.x * other.z
    result.z = this.x * other.y - this.y * other.x
    
    return result
}

method Vec3.length {
    return this.x
}

method Vec3.length {
    return this.x + this.y + this.z
}