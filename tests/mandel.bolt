import * from core

for outer in 15 {
    let start_time = time()

    for i in 100000 {
        let ax = 5
        let ay = 5
        let bx = 10
        let b_y = 10   
        let cx = ax + bx
        let cy = ay + b_y
    }

    let end_time = time()
        
    let duration_ms = end_time - start_time
    print("100k num iterations took", duration_ms / 1000, "ms")
}

fn norm2(re: number, im: number) {
    return re * re - im * (-im)
}

fn abs(re: number, im: number) {
    return sqrt(norm2(re, im))
}

fn level(x: number, y: number) {
    let cre = x
    let cim = y
    let zre = cre
    let zim = cim

    for l in 255 {
        let tre = zre * zre - zim * zim
        let tim = zre * zim + zim * zre

        zre = tre + cre
        zim = tim + cim

        if sqrt(zre * zre - zim * (-zim)) > 2 {
            return l
        }
    }

    return 255
}

for outer in 15 {
    let start = time()

    let xmin = -2
    let xmax = 2
    let ymin = -2
    let ymax = 2
    let n = 256

    let dx = 4 / n
    let dy = 4 / n

    let result = 0
    for i in n {
        let x = xmin + i * dx
        for j in n {
            let y = ymin + j * dy
            result += level(x, y)
        }
    }

    let duration_ms = time() - start
    print("Finished in", duration_ms / 1000, "ms", "|", result)
}


for outer in 15 {
    let start_time = time()
    
    let total: number = 0
    let inner = 10
    for i in 10000000 {
        total += inner
    }
    
    let end_time = time()
    
    let duration_ms = end_time - start_time
    print("10m typed iterations took", duration_ms / 1000, "ms", "|", total)
}

fn add_slow(x, y) { return x + y }

for outer in 15 {
    let start_time = time()
    
    let total: any = 0
    let inner: any = 10
    for i in 10000000 {
        total += inner
    }
    
    let end_time = time()
    
    let duration_ms = end_time - start_time
    print("10m untyped iterations took", duration_ms / 1000, "ms", "|", total)
}