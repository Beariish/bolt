import * from "../../test"

push_scope("if-expr")

test("if-expr correctly infers type", fn {
    let const x = if true then 10 else 20

    expect(typeof(x) == number, "Expected x to be 'number'")
    expect(x is number, "Expected x to be 'number'")
})

test("if-expr correctly infers type with else if branches", fn {
    let const x = if true then 10 
                else if false then 20
                else 30

    expect(typeof(x) == number, "Expected x to be 'number'")
    expect(x is number, "Expected x to be 'number'")
})

test("if-expr correctly infers union type", fn {
    let const x = if true then 10 else "badabing!"

    expect(typeof(x) == type(number | string), "Expected x to be 'number | string'")
    expect(x is type(number | string), "Expected x to be 'number | string'")
})

test("if-expr correctly infers union type with else if branches", fn {
    let const x = if true then 10 
                else if false then null
                else "badabing!"

    expect(typeof(x) == type(number | string | null), "Expected x to be 'number | string | null'")
    expect(x is type(number | string | null), "Expected x to be 'number | string | null'")
})

test("if-expr correctly infers type without else clause", fn {
    let const x = if true then 10

    expect(typeof(x) == type(number?), "Expected x to be 'number?'")
    expect(x is type(number?), "Expected x to be 'number?'")
})

test("if-expr correctly infers type without expression", fn {
    let const x = if true {}

    expect(typeof(x) == type(null), "Expected x to be 'null'")
    expect(x is type(null), "Expected x to be 'null'")
})

pop_scope()