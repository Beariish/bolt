import * from core
import mod
import branch
import message_printer from closure

fn test_fn(x: number, y: number) {
    return x + y
}

let a = fn(x: number) { return x * 2 }(test_fn(140, 150))

let a_as_string = to_string(a)

print("a", "has", "been", "evaluated", "as:", a_as_string + "!")

let start_time = time()

if a > 10 {
    print("A is big!")
} else if a < 0 {
    print("a is negative o:")
} else {
    print("A is small :(")

    if test_fn(a, a) > 10 {
        print("But it's almost big!")
    } else if test_fn(a, a) == 10 and a == 5 {
        print("And it's halfway to bigness!")
    } else {
        print("And it'll never be big...")
    }
}

let end_time = time()

print("Execution took " + to_string(end_time - start_time) + "us")

let printer = message_printer("test message")
printer()
printer()
printer()

let printer2 = message_printer(123.000)
printer2()
printer2()
printer2()

fn counter(max: number) {
    let count = -1
    return fn: number? { 
        count += 1
        if count < max { return count }
        return null
    }
}


let cnt = counter(5)
print(cnt())
print(cnt())
print(cnt())
print(cnt())
print(cnt())
print(cnt())

print("the most maxest is:", max(1, 2, 3, 4, 9, 5, 6, 1, 4, 7))

//return mod.subber(mod.adder(a, mod.constant), 10)