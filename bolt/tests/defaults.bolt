import * from core

let a: number   // 0
let b: bool     // false
let c: null     // null
let d: string   // ""
let e: []       // array[0]
let f: {}       // table{0}

let g: [number] // array[0]

let h: {
    x: number,
    y: number,
    a: []
}              // table{x: 0, y: 0, a: array[0]}

type Child = {
    name: string,
    age: number
}

type Person = {
    name: string,
    age: number,
    children: [{
        name: string,
        age: number
    }]
}

let i: Person  // table{name: "", age: 0, children: array[0]}
let j: string? // null

type Options = enum { One Two Three }
let k: Options // Options.One

fn print_with_separator(args: [], separator: string) {
    let result = ""
    for arg in args.each() {
        result += to_string(arg)
        result += separator
    }
    
    print(result)
}

fn print_all(args: []) {
    print_with_separator(args, " ")
}

print_all([a, b, /*c,*/ d, e, f, g, h, i, /*j,*/ k])

print(i.children)

i.children.push({
    name: "Alfred",
    age: 10
})

print(i.children)

print("done!")

export let A = a
export b

/*
type FibFn = fn(number, any): number

fn fib_internal(n: number, rec: any): number {
    if n <= 1 { return 1 }
    print("before", rec)
    let r = rec as FibFn!
    print("after", r)
    return r(n - 1, rec) + r(n - 2, rec)
}

fn fib(n: number) {
    return fib_internal(n, fib_internal)
}

print("fib(20)", fib(20))*/

fn fib(n: number) {
    if n <= 1 { return n }

    let a = 0
    let b = 1
    
    for i in n - 1 {
        let const c = a + b
        a = b
        b = c
    }

    return b
}

print("fib(100)", fib(100))
