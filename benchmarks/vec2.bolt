import sqrt from math
import bench from "bench"
import print from core

type Vec2 = final {
    x: number,
    y: number
}

fn Vec2.new(x: number, y: number) {
    return Vec2 => { x: x, y: y }
}

fn Vec2.@add(a: Vec2, b: Vec2) {
    return Vec2 => { x: a.x + b.x, y: a.y + b.y }
}

method Vec2.@sub(other: Vec2) {
    return Vec2 => { x: this.x - other.x, y: this.y - other.y }
}

method Vec2.@mul(other: Vec2) {
    return Vec2 => { x: this.x * other.x, y: this.y * other.y }
}

method Vec2.@div(other: Vec2) {
    return Vec2 => { x: this.x / other.x, y: this.y / other.y }
}

method Vec2.distance(other: Vec2) {
    let sx = this.x + other.x
    let sy = this.y + other.y
    return sqrt(sx * sx + sy * sy)
}

method Vec2.do_nothing { } 

bench("unhoisted 100k vec2 create, create, add", 35, fn {
    for i in 100000 {
        let a = Vec2.new(5, 5)
        let b = Vec2.new(10, 10)   
        let c = a + b
    }
})

bench("unhoisted 100k vec2 add", 35, fn {
    let a = Vec2.new(5, 5)
    let b = Vec2.new(10, 10)   
    for i in 100000 {
        let c = a + b
    }
})    

bench("unhoisted 1m vec2 distance", 35, fn {
    let a = Vec2.new(5, 5)
    let b = Vec2.new(10, 10)   
    for i in 1000000 {
        let c = a.distance(b)
    }
})

bench("unhoisted 1m vec2 do nothing", 35, fn {
    let a = Vec2.new(5, 5)
    for i in 1000000 {
        a.do_nothing()
    }
})

export Vec2